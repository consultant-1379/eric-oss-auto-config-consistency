/*******************************************************************************
 * COPYRIGHT Ericsson 2023 - 2024
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.apps.controller;

import static com.ericsson.oss.apps.util.Constants.DATABASE_OPERATION_FAILED;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.TransactionException;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ericsson.oss.apps.api.JobsApi;
import com.ericsson.oss.apps.api.model.EaccJob;
import com.ericsson.oss.apps.service.ExecutionService;
import com.ericsson.oss.apps.service.JobService;
import com.ericsson.oss.apps.service.ValidationService;
import com.ericsson.oss.apps.util.ValidationObject;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of JobsApi generated by open api generator.
 */
@Slf4j
@RestController
public class JobController implements JobsApi {

    private final JobService jobService;

    private final ValidationService validationService;

    private final ExecutionService executionService;

    @Autowired
    public JobController(final JobService jobService, final ValidationService validationService, final ExecutionService executionService) {
        this.jobService = jobService;
        this.validationService = validationService;
        this.executionService = executionService;
    }

    @Override
    public ResponseEntity<List<EaccJob>> getJobs() {
        log.info("GET /jobs REST interface is invoked.");
        try {
            return new ResponseEntity<>(jobService.getAllJobs(), HttpStatus.OK);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to get jobs", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, "Failed to get job(s).");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final Exception e) {
            log.error("Error getting Jobs.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    "Failed to get job(s).");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
    }

    @Override
    public ResponseEntity<EaccJob> postJobs(@Valid @RequestBody final EaccJob job) {
        log.info("POST /jobs REST interface is invoked");
        final ValidationObject validationObject;
        try {
            validationObject = validationService.validateJobAndThatJobNameDoesNotExist(job);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to create job", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, "Failed to create job.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }

        if (!validationObject.getValidated()) {
            log.error(validationObject.getDetails());
            throw new ControllerDetailException(
                    validationObject.getHttpStatus(),
                    validationObject.getDetails(),
                    validationObject.getTitle());
        }
        log.debug("Format of EaccJob validated.");
        return new ResponseEntity<>(jobService.create(job), HttpStatus.CREATED);
    }

    @Override
    public ResponseEntity<Void> deleteJob(final String jobName, final String accept) {
        log.info("DELETE /jobs REST interface is invoked.");
        try {
            checkValidation(validationService.validateJobNameAndJobExists(jobName));
            log.debug("Format of Job Name validated.");
            jobService.deleteJobByName(jobName);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to delete job", e);
            final ControllerDetailException exception = ControllerDetailException.builder()
                    .withStatus(HttpStatus.INTERNAL_SERVER_ERROR)
                    .withTitle("Failed to delete job.")
                    .withDetail(DATABASE_OPERATION_FAILED)
                    .build();
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @Override
    public ResponseEntity<EaccJob> putJob(final String jobName, @Valid @RequestBody final EaccJob job, final String accept,
            final String contentType) {
        log.info("PUT /jobs REST interface is invoked.");
        // the jobName in the url takes precedence 
        job.setJobName(jobName);

        try {
            checkValidation(validationService.validateJobNameAndJobExists(jobName));
            checkValidation(validationService.validateRulesetNameAndExists(job.getRulesetName()));
            checkValidation(validationService.validateScope(job.getScopeName()));

            if (executionService.isJobInUse(jobName)) {
                throw ControllerDetailException.builder()
                        .withStatus(HttpStatus.CONFLICT)
                        .withTitle("Cannot update job as it is used by an ongoing execution.")
                        .withDetail("Job in use.").build();
            }

            log.debug("Format of Job Name validated.");
            return new ResponseEntity<>(jobService.update(job), HttpStatus.OK);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to update job.", e);
            final ControllerDetailException exception = ControllerDetailException.builder()
                    .withStatus(HttpStatus.INTERNAL_SERVER_ERROR)
                    .withTitle("Failed to update job.")
                    .withDetail(DATABASE_OPERATION_FAILED)
                    .build();
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
    }

    private void checkValidation(final ValidationObject validationObject) {
        if (!validationObject.getValidated()) {
            log.error(validationObject.getDetails());
            throw ControllerDetailException.builder().withStatus(validationObject.getHttpStatus())
                    .withTitle(validationObject.getTitle())
                    .withDetail(validationObject.getDetails())
                    .build();
        }
    }
}
