/*******************************************************************************
 * COPYRIGHT Ericsson 2023 - 2024
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.apps.controller;

import static com.ericsson.oss.apps.util.Constants.ATTACHMENT;
import static com.ericsson.oss.apps.util.Constants.CSV_CONTENT_TYPE;
import static com.ericsson.oss.apps.util.Constants.CSV_FILENAME_TEMPLATE;
import static com.ericsson.oss.apps.util.Constants.DATABASE_OPERATION_FAILED;
import static com.ericsson.oss.apps.util.Constants.FAILED_TO_CREATE_SCOPE;
import static com.ericsson.oss.apps.util.Constants.SCOPES_URI;

import java.io.IOException;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.dao.DataAccessException;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.TransactionException;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.ericsson.oss.apps.api.ScopesApi;
import com.ericsson.oss.apps.api.model.EaccScopeMetadata;
import com.ericsson.oss.apps.model.Scope;
import com.ericsson.oss.apps.service.ExecutionService;
import com.ericsson.oss.apps.service.JobService;
import com.ericsson.oss.apps.service.ScopeService;
import com.ericsson.oss.apps.service.ValidationService;
import com.ericsson.oss.apps.util.ValidationObject;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import com.opencsv.exceptions.CsvValidationException;

import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of ScopesApi generated by open api generator.
 */
@Slf4j
@RestController
public class ScopeController implements ScopesApi {

    private final ScopeService scopeService;

    private final ExecutionService executionService;

    private final ValidationService validationService;

    private final JobService jobService;

    @Autowired
    public ScopeController(final ScopeService scopeService, final JobService jobService, final ValidationService validationService,
            final ExecutionService executionService) {
        this.scopeService = scopeService;
        this.jobService = jobService;
        this.validationService = validationService;
        this.executionService = executionService;
    }

    @Override
    public ResponseEntity<EaccScopeMetadata> createScope(
            @RequestParam("scopeName") final String scopeName,
            @RequestPart("fileName") final MultipartFile file) {
        log.info("POST /scopes REST interface is invoked.");

        final ValidationObject validationObject = validationService.validateScopeName(scopeName);
        if (!validationObject.getValidated()) {
            log.error(validationObject.getDetails());
            throw new ControllerDetailException(validationObject.getHttpStatus(), validationObject.getDetails(), validationObject.getTitle());
        }
        log.debug("Format of Scope Name validated.");

        try {
            if (scopeService.existsByName(scopeName)) {
                throw new ControllerDetailException(HttpStatus.BAD_REQUEST, "Use a unique scope name.",
                        "Failed to create scope. Scope with provided name already exists.");
            }

            final Scope scope = scopeService.createScopeFromCsv(scopeName, file);
            final EaccScopeMetadata eaccScopeMetadata = createEaccScopeMetadata(scope);
            final URI locationUri = URI.create(eaccScopeMetadata.getUri());
            log.info("Scope created successfully with URI: {}", locationUri);
            return ResponseEntity.created(locationUri).body(eaccScopeMetadata);

        } catch (final CsvRequiredFieldEmptyException | CsvValidationException e) {
            log.error(FAILED_TO_CREATE_SCOPE, e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.BAD_REQUEST,
                    "Fill in all required fields with the appropriate information.",
                    "File does not match the csv format.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final IOException e) {
            log.error("Failed to create scope with name.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    FAILED_TO_CREATE_SCOPE);
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final DataAccessException | TransactionException e) {
            log.error(FAILED_TO_CREATE_SCOPE, e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, FAILED_TO_CREATE_SCOPE);
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
    }

    @Override
    public ResponseEntity<Void> deleteScope(final String id, final String accept) {
        log.info("DELETE /scopes REST interface is invoked.");
        final UUID uuid = parseUuidFromString(id);
        final String scopeName;
        try {
            scopeName = scopeService.getScopeFromUUID(uuid).getName();
            if (jobService.isScopeInUse(scopeName)) {
                throw new ControllerDetailException(HttpStatus.CONFLICT,
                        "Only Scopes not associated with a Job configuration can be deleted.",
                        "Scope with provided ID is used in a Job configuration.");
            }
            scopeService.deleteScope(uuid);
        } catch (final IllegalArgumentException e) {
            throw buildExceptionForScopeDoesNotExist(e);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to delete scope.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, "Failed to delete scope.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @Override
    public ResponseEntity<Resource> getScope(final String id, final String accept) {
        log.info("GET /scopes/id REST interface is invoked.");
        final ByteArrayResource resource;
        final UUID uuid = parseUuidFromString(id);
        try {
            resource = scopeService.getCsvForScope(uuid);
        } catch (final IOException e) {
            log.error("Failed to read CSV from scopes for ID provided.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    "Failed to read InputStream.", "Error creating csv file.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final IllegalArgumentException e) {
            throw buildExceptionForScopeDoesNotExist(e);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to get scope.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, "Failed to get scope.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }

        if (log.isDebugEnabled()) {
            log.debug("CSV created from Scope fdns : {}", new String(resource.getByteArray(), StandardCharsets.UTF_8));
        }
        final HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType(CSV_CONTENT_TYPE));
        headers.setContentDisposition(ContentDisposition.builder(ATTACHMENT).filename(String.format(CSV_FILENAME_TEMPLATE, id)).build());

        return ResponseEntity.ok().headers(headers).body(resource);
    }

    @Override
    public ResponseEntity<List<EaccScopeMetadata>> listScopes() {
        log.info("GET /scopes REST interface is invoked.");
        try {
            return new ResponseEntity<>(scopeService.getAllScopeMetadata(), HttpStatus.OK);
        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to get scopes.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    DATABASE_OPERATION_FAILED, "Failed to get scopes.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final Exception e) {
            log.error("Error getting Scope Metadata.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.INTERNAL_SERVER_ERROR,
                    "Failed to get all Scope Metadata.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
    }

    @Override
    public ResponseEntity<EaccScopeMetadata> updateScope(final String id, final MultipartFile fileName, final String accept,
            final String contentType) {
        log.info("PUT /scopes/id REST interface is invoked.");
        final UUID uuid = parseUuidFromString(id);
        try {
            final Scope scope = scopeService.getScopeFromUUID(uuid);
            final String scopeName = scope.getName();
            if (executionService.isScopeInUse(scopeName)) {
                throw ControllerDetailException.builder().withStatus(HttpStatus.CONFLICT)
                        .withTitle("Cannot update scope as it is used by an ongoing execution.")
                        .withDetail("Scope in use.").build();
            }
            final EaccScopeMetadata updatedMetadata = scopeService.updateScope(scope, fileName);
            log.info("Scope with id: {} updated successfully", id);
            return new ResponseEntity<>(updatedMetadata, HttpStatus.OK);
        } catch (final CsvRequiredFieldEmptyException | CsvValidationException e) {
            final ControllerDetailException exception = ControllerDetailException.builder().withStatus(HttpStatus.BAD_REQUEST)
                    .withTitle("File does not match the csv format.")
                    .withDetail("Fill in all required fields with the appropriate information.").build();
            exception.addSuppressed(e);
            throw exception; //NOPMD

        } catch (final IOException e) {
            final ControllerDetailException exception = ControllerDetailException.builder().withStatus(HttpStatus.INTERNAL_SERVER_ERROR)
                    .withTitle("Error updating from csv file.")
                    .withDetail("Failed to update the scope from the file.").build();
            exception.addSuppressed(e);
            throw exception; //NOPMD

        } catch (final DataAccessException | TransactionException e) {
            log.error("Failed to update scope.", e);
            final ControllerDetailException exception = ControllerDetailException.builder().withStatus(HttpStatus.INTERNAL_SERVER_ERROR)
                    .withTitle("Failed to update scope.")
                    .withDetail(DATABASE_OPERATION_FAILED).build();
            exception.addSuppressed(e);
            throw exception; //NOPMD
        } catch (final IllegalArgumentException e) {
            throw buildExceptionForScopeDoesNotExist(e);
        }
    }

    private EaccScopeMetadata createEaccScopeMetadata(final Scope scope) {
        final EaccScopeMetadata eaccScopeMetadata = new EaccScopeMetadata();
        eaccScopeMetadata.setScopeName(scope.getName());
        eaccScopeMetadata.setId(String.valueOf(scope.getId()));
        eaccScopeMetadata.setUri(SCOPES_URI + scope.getId());
        return eaccScopeMetadata;
    }

    private UUID parseUuidFromString(final String id) {
        final UUID uuid;
        try {
            uuid = UUID.fromString(id);
        } catch (final IllegalArgumentException e) {
            log.error("Error parsing ID. Provided ID is invalid.", e);
            final ControllerDetailException exception = new ControllerDetailException(HttpStatus.BAD_REQUEST,
                    "Provide a valid ID.", "Error parsing ID. Provided ID is invalid.");
            exception.addSuppressed(e);
            throw exception; //NOPMD
        }
        return uuid;
    }

    public ControllerDetailException buildExceptionForScopeDoesNotExist(final Exception e) {
        log.error("Scope with provided ID does not exist.", e);
        final ControllerDetailException exception = new ControllerDetailException(HttpStatus.NOT_FOUND,
                "Provide a valid Scope ID.",
                "Scope with provided ID does not exist.");
        exception.addSuppressed(e);
        return exception;
    }
}